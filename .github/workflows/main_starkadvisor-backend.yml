name: Deploy Django backend to Azure Web App (App Service Linux)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: backend-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'   # Debe coincidir con la versión de App Service

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Opcional) Instalar deps solo para lint/tests en CI. 
      # Omitimos crear venv para no duplicar el build: Azure hará el build con Oryx.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip (opcional, acelera lint/tests)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # (Opcional) Si quieres correr tests rápidos antes de desplegar, descomenta:
      # - name: Install dependencies for tests
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     # pytest -q

      # Subimos el código tal cual (sin venv). Azure hará el build con Oryx.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-src
          path: |
            .
            !.git/
            !.github/
            !**/__pycache__/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-src

      - name: Azure Login (federated)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2A74A6406B2C4AE5BDE8385E609832AC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0A35B1E80008457D8D59EF4E62EA9F08 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_958550156BE34115B59D23AC21EE820B }}

      # (Súper útil) Garantiza app settings clave en App Service antes del deploy:
      - name: Ensure App Settings
        run: |
          az webapp config appsettings set \
            --name starkadvisor-backend \
            --resource-group rg-starkadvisor \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              WEBSITES_PORT=8000
          # Agrega aquí más settings si quieres forzarlos desde el pipeline.
          # Ej: DJANGO_SETTINGS_MODULE=starkadvisorbackend.settings.production

      - name: Deploy to Azure Web App
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'starkadvisor-backend'
          slot-name: 'Production'
          package: '.'

      # (Opcional) Reinicio suave tras el deploy
      - name: Restart app
        run: az webapp restart --name starkadvisor-backend --resource-group rg-starkadvisor
